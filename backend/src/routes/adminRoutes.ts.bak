import express from 'express';
import { User } from '../models/User';
import { UserQuestionHistory } from '../models/UserQuestionHistory';
import { UserQuiz } from '../models/UserQuiz';
import { authenticateToken, requireAdmin, AuthenticatedRequest } from '../middleware/roleAuth';

const router = express.Router();

// Apply authentication and admin role check to all routes
router.use(authenticateToken);
router.use(requireAdmin);

// Get all users with pagination
router.get('/users', async (req: AuthenticatedRequest, res) => {
  try {
    const page = parseInt(req.query.page as string) || 1;
    const limit = parseInt(req.query.limit as string) || 20;
    const skip = (page - 1) * limit;

    const users = await User.find()
      .select('-password')
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(limit);

    const totalUsers = await User.countDocuments();

    res.json({
      users,
      pagination: {
        currentPage: page,
        totalPages: Math.ceil(totalUsers / limit),
        totalUsers,
        hasNext: page * limit < totalUsers,
        hasPrev: page > 1
      }
    });
  } catch (error) {
    console.error('Error fetching users:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// Get user by ID
router.get('/users/:userId', async (req: AuthenticatedRequest, res) => {
  try {
    const user = await User.findById(req.params.userId).select('-password');
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }

    // Get user's quiz statistics
    const quizStats = await UserQuiz.aggregate([
      { $match: { userId: user._id } },
      {
        $group: {
          _id: null,
          totalQuizzes: { $sum: 1 },
          averageScore: { $avg: '$score' },
          totalTimeSpent: { $sum: '$timeSpent' }
        }
      }
    ]);

    // Get question history stats
    const questionStats = await UserQuestionHistory.aggregate([
      { $match: { userId: user._id } },
      {
        $group: {
          _id: null,
          totalQuestions: { $sum: 1 },
          uniqueQuestions: { $addToSet: '$questionId' }
        }
      },
      {
        $project: {
          totalQuestions: 1,
          uniqueQuestions: { $size: '$uniqueQuestions' }
        }
      }
    ]);

    res.json({
      user,
      stats: {
        quizzes: quizStats[0] || { totalQuizzes: 0, averageScore: 0, totalTimeSpent: 0 },
        questions: questionStats[0] || { totalQuestions: 0, uniqueQuestions: 0 }
      }
    });
  } catch (error) {
    console.error('Error fetching user:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// Update user role/subscription
router.put('/users/:userId/role', async (req: AuthenticatedRequest, res) => {
  try {
    const { role, subscriptionPlan } = req.body;
    
    if (!['registered', 'monthly_pack', 'quarterly_pack', 'annual_pack', 'admin'].includes(role)) {
      return res.status(400).json({ message: 'Invalid role' });
    }

    const updateData: any = { role };
    
    // Set subscription plan for paid users
    if (['monthly_pack', 'quarterly_pack', 'annual_pack'].includes(role)) {
      updateData.subscriptionPlan = role;
    } else {
      updateData.$unset = { subscriptionPlan: 1 };
    }

    const user = await User.findByIdAndUpdate(
      req.params.userId,
      updateData,
      { new: true }
    ).select('-password');

    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }

    res.json({ user, message: 'User role updated successfully' });
  } catch (error) {
    console.error('Error updating user role:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// Reset user's question history (admin override)
router.post('/users/:userId/reset-questions', async (req: AuthenticatedRequest, res) => {
  try {
    const userId = req.params.userId;
    
    // Delete all question history for the user
    await UserQuestionHistory.deleteMany({ userId });

    // Reset user's reset counters
    await User.findByIdAndUpdate(userId, {
      $set: { resetsUsed: 0 },
      $unset: { resetTimestamps: 1 }
    });

    res.json({ message: 'User question history reset successfully' });
  } catch (error) {
    console.error('Error resetting user question history:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// Get platform statistics
router.get('/stats', async (req: AuthenticatedRequest, res) => {
  try {
    // User statistics by role
    const userStats = await User.aggregate([
      {
        $group: {
          _id: '$role',
          count: { $sum: 1 }
        }
      }
    ]);

    // Quiz statistics
    const quizStats = await UserQuiz.aggregate([
      {
        $group: {
          _id: null,
          totalQuizzes: { $sum: 1 },
          averageScore: { $avg: '$score' },
          totalTimeSpent: { $sum: '$timeSpent' }
        }
      }
    ]);

    // Question interaction statistics
    const questionStats = await UserQuestionHistory.aggregate([
      {
        $group: {
          _id: null,
          totalInteractions: { $sum: 1 },
          uniqueUsers: { $addToSet: '$userId' },
          uniqueQuestions: { $addToSet: '$questionId' }
        }
      },
      {
        $project: {
          totalInteractions: 1,
          uniqueUsers: { $size: '$uniqueUsers' },
          uniqueQuestions: { $size: '$uniqueQuestions' }
        }
      }
    ]);

    res.json({
      users: userStats.reduce((acc, stat) => {
        acc[stat._id] = stat.count;
        return acc;
      }, {}),
      quizzes: quizStats[0] || { totalQuizzes: 0, averageScore: 0, totalTimeSpent: 0 },
      questions: questionStats[0] || { totalInteractions: 0, uniqueUsers: 0, uniqueQuestions: 0 }
    });
  } catch (error) {
    console.error('Error fetching admin stats:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

export default router; 